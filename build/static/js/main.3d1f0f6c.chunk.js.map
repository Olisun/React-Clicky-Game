{"version":3,"sources":["components/ScoreCount/index.js","components/Image/index.js","App.js","serviceWorker.js","index.js"],"names":["ScoreCount","props","className","title","character","score","highScore","Images","onClick","clickedImage","id","alt","src","image","shuffle","array","i","length","randIndex","Math","floor","random","App","state","images","showAlert","showWins","clickedImages","setState","indexOf","push","console","log","handleIncrement","shuffleImages","style","opacity","this","map","Image","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4sCA+BeA,G,MA3BI,SAAAC,GACjB,OAEE,4BAAQC,UAAU,cAChB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,qBACb,4BAAKD,EAAME,QAEb,yBAAKD,UAAU,qBACb,4BAAKD,EAAMG,YAEb,yBAAKF,UAAU,sBACb,8CAAoBD,EAAMI,QAE5B,yBAAKH,UAAU,sBACb,2CAAiBD,EAAMK,aAG3B,yBAAKJ,UAAU,OACb,yBAAKA,UAAU,uBACb,yICNKK,G,MAdA,SAAAN,GAAK,OAEnB,yBAAKC,UAAU,QAAQM,QAAS,kBAAKP,EAAMQ,aAAaR,EAAMS,MAC7D,yBAAKR,UAAU,mBACb,yBAAKS,IAAKV,EAAMG,UAAWQ,IAAKX,EAAMY,QACtC,yBAAKX,UAAU,WACb,yBAAKA,UAAU,QACZD,EAAMG,gBCLRU,EAAU,SAAAC,GACf,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAC1C,IAAME,EAAYC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADR,EAEX,CAACD,EAAMG,GAAYH,EAAMC,IAAvDD,EAAMC,GAFmC,KAE/BD,EAAMG,GAFyB,KAI5C,OAAOH,GAqGMO,E,2MA/FbC,MAAQ,CACNC,SACAnB,MAAO,EACPC,UAAW,EACXmB,UAAW,EACXC,SAAU,EACVC,cAAe,I,EAIjBlB,aAAe,SAAAC,GAEb,IAAIiB,EAAgB,EAAKJ,MAAMI,cAC3BtB,EAAQ,EAAKkB,MAAMlB,MACnBC,EAAY,EAAKiB,MAAMjB,UAC3B,EAAKsB,SAAS,CACZH,UAAW,KAGsB,IAA/BE,EAAcE,QAAQnB,IACxBiB,EAAcG,KAAKpB,GACnBqB,QAAQC,IAAIL,GACZ,EAAKM,kBACL,EAAKC,iBACyB,KAArB,EAAKX,MAAMlB,MACpB,EAAKuB,SAAS,CACZF,SAAU,EACVrB,MAAO,EACPsB,cAAgB,MAIlB,EAAKC,SAAS,CACZvB,MAAO,EACPsB,cAAe,KAGjB,EAAKC,SAAS,CACZH,UAAW,KAIXpB,EAAQC,GACV,EAAKsB,SAAS,CACZtB,UAAWD,K,EAKjB4B,gBAAkB,WAChB,EAAKL,SAAS,CACZvB,MAAO,EAAKkB,MAAMlB,MAAQ,K,EAI9B6B,cAAgB,WACd,EAAKN,SAAS,CACZJ,OAAQV,EAAQU,M,wEAKV,IAAD,OACP,OACE,yBAAKtB,UAAU,aACb,yBAAKA,UAAU,qBAAqBiC,MAAO,CAAEC,QAASC,KAAKd,MAAME,YAAjE,wDAGA,yBAAKvB,UAAU,sBAAsBiC,MAAO,CAAEC,QAASC,KAAKd,MAAMG,WAAlE,qDAIA,kBAAC,EAAD,CACEvB,MAAM,gCACNE,MAAOgC,KAAKd,MAAMlB,MAClBC,UAAW+B,KAAKd,MAAMjB,YAExB,yBAAKJ,UAAU,OAEZmC,KAAKd,MAAMC,OAAOc,KAAI,SAAAzB,GAAK,OAC1B,kBAAC0B,EAAD,CACEC,IAAK3B,EAAMH,GACXA,GAAIG,EAAMH,GACVN,UAAWS,EAAMT,UACjBD,MAAOU,EAAMT,UACbS,MAAOA,EAAMA,MACbJ,aAAc,EAAKA,wB,GAxFfgC,aCHEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3d1f0f6c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n// Defining the ScoreCount component. \nconst ScoreCount = props => {\n  return (\n    // Adding static content in the header section for title, high score, current score and a brief description.\n    <header className=\"scoreCount\">\n      <div className=\"row\">\n        <div className=\"col-md-3 col-left\">\n          <h5>{props.title}</h5>\n        </div>  \n        <div className=\"col-md-3 col-left\">\n          <h5>{props.character}</h5>\n        </div>\n        <div className=\"col-md-3 col-right\">\n          <h5>Current Score: {props.score}</h5>\n        </div>\n        <div className=\"col-md-3 col-right\">\n          <h5>High Score: {props.highScore}</h5>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-md-12 col-right\">\n          <h5>Click on any Avenger to score a point but you will lose a point if you click the same Avenger twice!</h5>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default ScoreCount;","import React from \"react\";\nimport \"./style.css\";\n\n// Defining the Image component. \nconst Images = props => (\n  // Attaching an event-handler to each image.\n <div className=\"image\" onClick={() =>props.clickedImage(props.id)}>\n  <div className=\"image-container\">\n    <img alt={props.character} src={props.image} />\n    <div className=\"overlay\">\n      <div className=\"text\">\n        {props.character}\n      </div>\n    </div>\n  </div>\n </div>\n);\n\nexport default Images;","import React, { Component } from \"react\";\nimport images from \"./images.json\";\nimport ScoreCount from \"./components/ScoreCount\";\nimport Image from \"./components/Image\";\n\n// Function for shuffling the array of images defined in images.json (applied from shuffling a deck of cards from class). \n const shuffle = array => {\n  for (let i = array.length - 1; i >= 0; i--) {\n    const randIndex = Math.floor(Math.random() * (i + 1));\n    [array[i], array[randIndex]] = [array[randIndex], array[i]]\n  }\n  return array;\n}\n\n// Bringing in the components. \nclass App extends Component {\n  // Setting initial state (basically defining the variables). \n  state = {\n    images,\n    score: 0,\n    highScore: 0,\n    showAlert: 0,\n    showWins: 0,\n    clickedImages: []\n  };\n\n  // This links the event-handler function in the Image component to the variables declared above.\n  clickedImage = id => {\n    // clickedImages is an empty array for images the user clicks once. \n    let clickedImages = this.state.clickedImages;\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n    this.setState({\n      showAlert: 0\n    });\n    // if the clicked image is clicked and it's not found in the array (what the \"===-1\" states), then push the image id into the clickedImages array. increment the score and run the shuffle function. \n    if (clickedImages.indexOf(id) === -1) {\n      clickedImages.push(id);\n      console.log(clickedImages);\n      this.handleIncrement();\n      this.shuffleImages();\n    } else if (this.state.score === 10) {\n      this.setState({\n        showWins: 1,\n        score: 0,\n        clickedImages : []\n      });\n    // if the user clicks the same image again, since it's already in the array (from the previous click), the score is reset to 0.\n    } else {\n      this.setState({\n        score: 0,\n        clickedImages: []\n      });\n      // this shows the \"Oops\" message defined below\n      this.setState({\n        showAlert: 1\n      });\n    };\n    // if the current score is greater than the high score, then that score becomes the high score. \n    if (score > highScore) {\n      this.setState({\n        highScore: score\n      });\n    };\n  }\n  // Incrementing the score count\n  handleIncrement = () => {\n    this.setState({\n      score: this.state.score + 1\n    });\n  };\n  // Calling the shuffle function defined above. \n  shuffleImages = () => {\n    this.setState({\n      images: shuffle(images)\n    });\n  };\n\n  // Rendering everything to the DOM. \n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"alert alert-danger\" style={{ opacity: this.state.showAlert }} >\n          Oops! You've already clicked this! Please try again.\n        </div>\n        <div className=\"alert alert-success\" style={{ opacity: this.state.showWins }} >\n          Great memory! You haven't clicked any duplicates!\n        </div>\n        {/* Bringing in the ScoreCount function from the ScoreCount component with the dynamic score count defined above */}\n        <ScoreCount\n          title=\"Memory Game with the Avengers\"\n          score={this.state.score}\n          highScore={this.state.highScore}\n        />\n        <div className=\"row\">\n          {/* Using the map method to map in the key-value-pairs from images.json */}\n          {this.state.images.map(image => (\n            <Image\n              key={image.id}\n              id={image.id}\n              character={image.character}\n              title={image.character}\n              image={image.image}\n              clickedImage={this.clickedImage}\n            />  \n          ))}\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}